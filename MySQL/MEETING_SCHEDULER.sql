DROP DATABASE IF EXISTS `MEETING_SCHEDULER`;
CREATE DATABASE MEETING_SCHEDULER;
USE MEETING_SCHEDULER;

CREATE TABLE USER
(LAST_NAME VARCHAR(40),
FIRST_NAME VARCHAR(40),
USER_ID INTEGER NOT NULL AUTO_INCREMENT,
TYPE CHAR(1),
EMAIL_ID VARCHAR(40),
PHONE VARCHAR(20),
ORGANIZATION VARCHAR(40),
USER_NAME VARCHAR(40),
PASSWORD VARCHAR(40),
STATUS CHAR(1),
PRIMARY KEY (USER_ID));

CREATE TABLE MEETING
(TITLE VARCHAR(100),
MEETING_ID BIGINT NOT NULL AUTO_INCREMENT,
USER_ID INTEGER,
MEETING_DATE DATE,
MEETING_TIME TIME,
MEETING_DURATION TIME,
ADDRESS_LINE1 VARCHAR(50),
ADDRESS_LINE2 VARCHAR(50),
CITY VARCHAR(20),
STATE VARCHAR(20),
ZIPCODE VARCHAR(10),
STATUS CHAR(1),
PRIMARY KEY (MEETING_ID),
FOREIGN KEY (USER_ID) REFERENCES USER (USER_ID));

CREATE TABLE MEETING_DESCRIPTION
(MEETING_ID BIGINT,
MEETING_DESC VARCHAR(1000),
PRIMARY KEY (MEETING_ID),
FOREIGN KEY (MEETING_ID) REFERENCES MEETING (MEETING_ID));


DROP PROCEDURE IF EXISTS meeting_scheduler.updateMeetings; 
delimiter //  
CREATE PROCEDURE `updateMeetings`(IN IN_TITLE VARCHAR(100),
IN IN_MEETING_ID BIGINT,
IN IN_MEETING_DATE DATE,
IN IN_MEETING_TIME TIME,
IN IN_MEETING_DURATION TIME,
IN IN_ADDRESS_LINE1 VARCHAR(50),
IN IN_ADDRESS_LINE2 VARCHAR(50),
IN IN_CITY VARCHAR(20),
IN IN_STATE VARCHAR(20),
IN IN_ZIPCODE VARCHAR(10),
IN IN_STATUS CHAR(1),
IN IN_MEETING_DESCRIPTION VARCHAR(1000))
BEGIN
-- Declare variables to hold diagnostics area information
  DECLARE code CHAR(5) DEFAULT '00000';
  DECLARE msg TEXT;
  DECLARE rows INT;
  DECLARE result TEXT;
  -- Declare exception handler
DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
    BEGIN
      GET DIAGNOSTICS CONDITION 1
        code = RETURNED_SQLSTATE, msg = MESSAGE_TEXT;
    END;
SET result='Success';

UPDATE MEETING SET TITLE=IN_TITLE,MEETING_DATE=IN_MEETING_DATE,MEETING_TIME=IN_MEETING_TIME,MEETING_DURATION=IN_MEETING_DURATION,ADDRESS_LINE1=IN_ADDRESS_LINE1,ADDRESS_LINE2=IN_ADDRESS_LINE2,CITY=IN_CITY,STATE=IN_STATE,ZIPCODE=IN_ZIPCODE,STATUS=IN_STATUS WHERE MEETING_ID=IN_MEETING_ID;

IF (code != '00000') THEN
SET result ='Failure';
END IF;

UPDATE MEETING_DESCRIPTION SET MEETING_DESC=IN_MEETING_DESCRIPTION WHERE MEETING_ID=IN_MEETING_ID;

IF (code != '00000') THEN
SET result ='Failure';
END IF;

COMMIT;
SELECT result;
END //
delimiter ;





DROP PROCEDURE IF EXISTS meeting_scheduler.addMeetings; 
delimiter //  
CREATE PROCEDURE `addMeetings`(IN IN_TITLE VARCHAR(100),
IN IN_USER_ID INTEGER,
IN IN_MEETING_DATE DATE,
IN IN_MEETING_TIME TIME,
IN IN_MEETING_DURATION TIME,
IN IN_ADDRESS_LINE1 VARCHAR(50),
IN IN_ADDRESS_LINE2 VARCHAR(50),
IN IN_CITY VARCHAR(20),
IN IN_STATE VARCHAR(20),
IN IN_ZIPCODE VARCHAR(10),
IN IN_STATUS CHAR(1),
IN IN_MEETING_DESCRIPTION VARCHAR(1000))
BEGIN
DECLARE MEET_ID BIGINT;

  -- Declare variables to hold diagnostics area information
  DECLARE code CHAR(5) DEFAULT '00000';
  DECLARE msg TEXT;
  DECLARE rows INT;
  DECLARE result TEXT;
  -- Declare exception handler
DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
    BEGIN
      GET DIAGNOSTICS CONDITION 1
        code = RETURNED_SQLSTATE, msg = MESSAGE_TEXT;
    END;
SET result='Success';

SET MEET_ID=1;

INSERT INTO MEETING (TITLE,USER_ID,MEETING_DATE,MEETING_TIME,MEETING_DURATION,ADDRESS_LINE1,ADDRESS_LINE2,CITY,STATE,ZIPCODE,STATUS) VALUES (IN_TITLE,IN_USER_ID,IN_MEETING_DATE,IN_MEETING_TIME,IN_MEETING_DURATION,IN_ADDRESS_LINE1,IN_ADDRESS_LINE2,IN_CITY,IN_STATE,IN_ZIPCODE,IN_STATUS);

IF (code != '00000') THEN
SET result ='Failure';
END IF;

SELECT MEETING_ID INTO MEET_ID FROM MEETING WHERE USER_ID=IN_USER_ID ORDER BY MEETING_ID DESC LIMIT 1;

INSERT INTO MEETING_DESCRIPTION (MEETING_ID,MEETING_DESC) VALUES (MEET_ID ,IN_MEETING_DESCRIPTION);
COMMIT;

IF (code != '00000') THEN
SET result ='Failure';
END IF;

SELECT result;

END //
delimiter ;



DROP PROCEDURE IF EXISTS meeting_scheduler.addUser; 
delimiter //  
CREATE PROCEDURE `addUser`(IN IN_LAST_NAME VARCHAR(40),
IN_FIRST_NAME VARCHAR(40),
IN_TYPE CHAR(1),
IN_EMAIL_ID VARCHAR(40),
IN_PHONE VARCHAR(20),
IN_ORGANIZATION VARCHAR(40),
IN_USER_NAME VARCHAR(40),
IN_PASSWORD VARCHAR(40),
IN_STATUS CHAR(1))
BEGIN
-- Declare variables to hold diagnostics area information
  DECLARE code CHAR(5) DEFAULT '00000';
  DECLARE msg TEXT;
  DECLARE rows INT;
  DECLARE result TEXT;
  -- Declare exception handler
DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
    BEGIN
      GET DIAGNOSTICS CONDITION 1
        code = RETURNED_SQLSTATE, msg = MESSAGE_TEXT;
    END;
SET result='Success';
INSERT INTO USER (LAST_NAME,FIRST_NAME,TYPE,EMAIL_ID,PHONE,ORGANIZATION,USER_NAME,PASSWORD,STATUS) VALUES
(IN_LAST_NAME,IN_FIRST_NAME,IN_TYPE,IN_EMAIL_ID,IN_PHONE,IN_ORGANIZATION,IN_USER_NAME,IN_PASSWORD,IN_STATUS);


IF (code != '00000') THEN
SET result ='Failure';
END IF;

COMMIT;
SELECT result;
END //
delimiter ;



DROP PROCEDURE IF EXISTS meeting_scheduler.updateUser; 
delimiter //  
CREATE PROCEDURE `updateUser`(IN IN_USER_ID INTEGER,
IN IN_LAST_NAME VARCHAR(40),
IN_FIRST_NAME VARCHAR(40),
IN_TYPE CHAR(1),
IN_EMAIL_ID VARCHAR(40),
IN_PHONE VARCHAR(20),
IN_ORGANIZATION VARCHAR(40),
IN_USER_NAME VARCHAR(40),
IN_PASSWORD VARCHAR(40),
IN_STATUS CHAR(1))
BEGIN
-- Declare variables to hold diagnostics area information
  DECLARE code CHAR(5) DEFAULT '00000';
  DECLARE msg TEXT;
  DECLARE rows INT;
  DECLARE result TEXT;
  -- Declare exception handler
DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
    BEGIN
      GET DIAGNOSTICS CONDITION 1
        code = RETURNED_SQLSTATE, msg = MESSAGE_TEXT;
    END;
SET result='Success';
UPDATE USER SET LAST_NAME=IN_LAST_NAME,FIRST_NAME=IN_FIRST_NAME,TYPE=IN_TYPE,EMAIL_ID=IN_EMAIL_ID,PHONE=IN_PHONE,ORGANIZATION=IN_ORGANIZATION,USER_NAME=IN_USER_NAME,PASSWORD=IN_PASSWORD,STATUS=IN_STATUS WHERE USER_ID=IN_USER_ID;

IF (code != '00000') THEN
SET result ='Failure';
END IF;

COMMIT;
SELECT result;
END //
delimiter ;



DROP PROCEDURE IF EXISTS meeting_scheduler.viewUser; 
delimiter //  
CREATE PROCEDURE `viewUser`(IN_USER_NAME VARCHAR(40),
IN_PASSWORD VARCHAR(40))
BEGIN

SELECT LAST_NAME,FIRST_NAME,USER_ID,TYPE,EMAIL_ID,PHONE,ORGANIZATION FROM USER WHERE USER_NAME=IN_USER_NAME AND PASSWORD=IN_PASSWORD AND STATUS='A';

COMMIT;
END //
delimiter ;



DROP PROCEDURE IF EXISTS meeting_scheduler.viewMeetings;
delimiter // 
CREATE PROCEDURE `viewMeetings`(IN IN_USER_ID INTEGER,
IN IN_MEETING_DATE DATE,
IN IN_CITY VARCHAR(20))
BEGIN

SET @query = 'SELECT *
  FROM MEETING, MEETING_DESCRIPTION
WHERE MEETING.MEETING_ID=MEETING_DESCRIPTION.MEETING_ID AND MEETING_DATE >= CURRENT_DATE AND STATUS="A"';

IF(IN_USER_ID !=0) THEN
SET @query = CONCAT(@query, ' AND USER_ID=', IN_USER_ID);
END IF;

IF(IN_MEETING_DATE IS NOT NULL) THEN
SET @query = CONCAT(@query, ' AND MEETING_DATE= "', IN_MEETING_DATE);
SET @query = CONCAT(@query, '"');
END IF;

IF(IN_CITY IS NOT NULL) THEN
SET @query = CONCAT(@query, ' AND CITY LIKE "%', IN_CITY);
SET @query = CONCAT(@query, '%"');
END IF;

IF(IN_USER_ID =0 AND IN_CITY IS NULL AND IN_MEETING_DATE IS NULL) THEN
SET @query = CONCAT(@query, ' AND USER_ID=', 100);
END IF;

PREPARE stmt1 FROM @query;

EXECUTE stmt1;

END //
delimiter ;


delimiter //  
CREATE PROCEDURE `deleteMeetings`(IN IN_MEETING_ID BIGINT)
BEGIN
-- Declare variables to hold diagnostics area information
  DECLARE code CHAR(5) DEFAULT '00000';
  DECLARE msg TEXT;
  DECLARE rows INT;
  DECLARE result TEXT;
  -- Declare exception handler
DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
    BEGIN
      GET DIAGNOSTICS CONDITION 1
        code = RETURNED_SQLSTATE, msg = MESSAGE_TEXT;
    END;
SET result='Success';

DELETE FROM MEETING_DESCRIPTION WHERE MEETING_ID=IN_MEETING_ID;

IF (code != '00000') THEN
SET result ='Failure';
END IF;

DELETE FROM MEETING WHERE MEETING_ID=IN_MEETING_ID;

IF (code != '00000') THEN
SET result ='Failure';
END IF;

COMMIT;
SELECT result;
END //
delimiter ;


delimiter //  
CREATE PROCEDURE `deleteUser`(IN IN_USER_ID BIGINT)
BEGIN
-- Declare variables to hold diagnostics area information
  DECLARE code CHAR(5) DEFAULT '00000';
  DECLARE msg TEXT;
  DECLARE rows INT;
  DECLARE result TEXT;
  -- Declare exception handler
DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
    BEGIN
      GET DIAGNOSTICS CONDITION 1
        code = RETURNED_SQLSTATE, msg = MESSAGE_TEXT;
    END;
SET result='Success';

DELETE FROM USER WHERE USER_ID=IN_USER_ID;

IF (code != '00000') THEN
SET result ='Failure';
END IF;

COMMIT;
SELECT result;
END //
delimiter ;


INSERT INTO USER (LAST_NAME,FIRST_NAME,USER_ID,TYPE,EMAIL_ID,PHONE,ORGANIZATION,USER_NAME,PASSWORD,STATUS) VALUES
('DAS','SOURAV',1000,'A','SXD133230@UTDALLAS.EDU','9407816393','UTD','SOURAV','1234','A');

INSERT INTO MEETING (TITLE,MEETING_ID,USER_ID,MEETING_DATE,MEETING_TIME,MEETING_DURATION,ADDRESS_LINE1,ADDRESS_LINE2,CITY,STATE,ZIPCODE,STATUS) VALUES
('TEST',1000,1000,'2014-06-06','16:30:00','01:00:00','UTD, 800 W CAMPBELL ROAD','','RICHARDSON','TEXAS','75080','A');

INSERT INTO MEETING_DESCRIPTION (MEETING_ID,MEETING_DESC) VALUES
(1000,'TEST MEETING, SCHEDULED TO CHECK FUNCTIONALITY OF THE SYSTEM.');

COMMIT;

CALL addUser('KAGWAD','PRASHANT','A','PRASHANT.KAGWAD@UTDALLAS.EDU','9432589321','UTD','PRASHANT','1234','A');

CALL addMeetings('TEST1',1001,'2014-05-25','09:30:00','01:00:00','UTD, 800 W CAMPBELL ROAD','','Dallas','TEXAS','75080','A','Test for add meetings proc');
CALL addMeetings('TEST2',1001,'2014-05-02','09:30:00','01:00:00','UTD, 800 W CAMPBELL ROAD','','Dallas','TEXAS','75080','A','Test for view meetings proc');

SELECT * FROM MEETING;

use meeting_scheduler;
DROP PROCEDURE IF EXISTS meeting_scheduler.viewAllUser; 
delimiter //  
CREATE PROCEDURE `viewAllUser`()
BEGIN

SELECT LAST_NAME,FIRST_NAME,USER_ID,TYPE,EMAIL_ID,PHONE,ORGANIZATION FROM USER WHERE STATUS='A';

END //
delimiter ;


DROP PROCEDURE IF EXISTS meeting_scheduler.viewAllMeetings; 
delimiter //  
CREATE PROCEDURE `viewAllMeetings`()
BEGIN

SELECT * 
  FROM MEETING, MEETING_DESCRIPTION 
 WHERE MEETING.MEETING_ID=MEETING_DESCRIPTION.MEETING_ID AND STATUS="A" AND MEETING_DATE >= CURRENT_DATE;

END //
delimiter ;